0. Установи глобальные параметры(укажи своё имя и свой емейл в глобальных настройках гита).
 0.1. Для этого запусти Git Bash из пуска(я его уже устанавливал тебе на комп).
 0.2. В git bash введи строку: git config --global user.name "твое имя латиницей" (так ты задаешь имя).например
 0.3. В git bash введи строку: git congiq --global user.email "твой емейл" (тот на который у тебя зареган акк github).
 0.4. Закрой git bash.
1. Зайди в своем файловом менеджере на диск C.
2. Создай папку projects, в ней папку proj1.
3. Находясь в папке, нажми правой кнопкой на пустом месте и GIT BASH HERE.(Запуститься командрая строка гит, та же самая что и
   на 0-ом шаге)
4. Введи git init, запусти(интер), - таким образом ты создашь новый репозиторий,
   (теперь это твой репозиторий в котором могут создаваться/изменятся файлы, и который ты можешь опубликовать на гитхабе,
   давать доступ другим людям чтобы разрабатывать проект, ну и прочее гитовское дело делать..., что за "гитовское дело",
   - поймешь позже). Имя этого репозитория - это название папки в котором ты выполнила команду git init(т.е. имя = proj1).
5. Создай файл Alina.txt с каким-нибудь содержимым и сохрани его.
6. В git bash введи: git status. Должно будет отобразиться что вот он, ух ты файл!!! и он должен вроде быть как отмечен крассным,
   и еще там фраза должна быть - что-то про индексы, о том что файл не добавлен в индекс, - это значит что файл не индексируется,
   и что изменения сделанные в нем не будут приняты в коммите,( коммит(commit) - это слепок(аля сохранение) файлов
    или изменений сделанных в файлах).
7. Добавь файлы (ну точнее свой один файл Alina.txt) в индекс, для этого выполни команду git add Alina.txt
   (все, теперь можем закомитить и принять изменения).
8. Сделай коммит (то есть сохрани текущее состояние файлов), выполни команду git commit -m 'сдесь твой комментарий'
   (комментарии в коммите нужны для того чтобы знать что было изменено и зачем - это очень удобно для разработчиков).
9. Измени содержимое файла Alina.txt как-нибудь(например добавь строчку) и сохрани, сделай git diff, - и ты увидишь изменения
   сделанные тобой в файле. Опять же, для того чтобы принять эти изменения и сохранить их, тебе нужно проиндексировать файл
   и сделать коммит (надеюсь ты с этим уже справишся).
10. Для того чтобы оперировать с гитхабом, тебе нужно добавить свой гитхабовский ник в глобальные настройки командой:
   git config --global user.username 'и вот здесь твой ник, кстати помоему вроде и без кавычек можно',
   чтобы проверить добавился ли ник, после выполни команду git config --list, там напропив поля user.username=,будет твой username
11. Создай удаленный репозиторий, т.е. репозиторий на гитхаб и назови его так же как ты назвала свой локальный репозиторий
   (т.е. proj1).
11.1. Скопируй ссылку на свой репозиторий, там будет https и в окошечке прописанна ссылка, !не в адрессной строке!
   а на самой странице репозитория, там даже справа кнопка есть для копирования, не нужно даже ктрл+с делать.
11.2. Установи соединение, чтобы твой локальный репозиторий знал где лежит твой удаленный репозиторий:
   git remote add origin 'здесь та самая скопированная ссылка, без кавычек, кавычки просто для удобства я добавил сейчас здесь'.
   (remote add - как ты уже догадалась "добавляет удаленный", origin - название удаленной ветви репозитория(вроде как я понял),
   ветвь удаленного репозитория по умолчания всегда origin, но менять можно, ну и вконце урл того самого удаленного репозитория).
11.3. Отправь все изменения которые ты сделала с репозиторием на локальной машине на удаленный сервер github'а, для этого:
   git push origin master, push - отправит данные в удаленный репозиторий ( указали ветку origin) с твоего локального репозитория
   (ветка master), - пока что master, просто потому что у тебя нет других, потому что ты не создавала их еще.
   (И ЗАЙДЯ НА ГИТХАБ ТЫ УВИДИШЬ У СЕБЯ В РЕПОЗИТОРИИ СВОЙ ФАЙЛИК Alina.txt, ДАДА!!! ЭТО ТАКАЯ ОСОБАЯ, УЛИЧНАЯ МАГИЯ!!!АХРЕНЕТЬ ДА?!
   ВОТ ТУТ УЖЕ МОЖЕШЬ ССАТЬ КИПЯТКОМ И ОСТАВЛЯТЬ СНИСХОДИТЕЛЬНЫЕ КОММЕНТАРИИ НА ХАБРЕ, ТИПА ТЫ НЕИБАЦО ПРОГРАММИСТ)
12. Теперь форкни меня детка!, форк - ответвление, ты берешь себе чужой репозиторий и на его основе что-то разрабатываешь, потом
   можешь влить обратно в тот проект который ты форкала, тем самым его дополнив, - это делается с позволения тех чей репозиторий
   (проект) ты форкнула. Просто выбери мой репозиторий justamusta.github.io и справа в верхнем углу нажми кнопку "fork", вот и
   все. Ты меня форкнула. Теперь скопируй себе его на локальную машину:
    уже у себя в профиле открой этот репозиторий,
    скоперни себе https ссылку для соединения,
    выполни команду cd .. (именно так, там две точки подряд, не через пробел, это выведет тебя в дирректорию выше, то есть
    в projects),
    выполни git clone 'ссыль которую ты копернула, опять же, кавычки нафиг',
    ЮХУ, ты крута, а еще ты увидишь как у тебя появилась новая дирректория, с файлами репозитория,
    теперь та удаленная копия моего репозитория которая находиться в твоем аккаунте гитхаба, автоматически соединяется с твоей
    локальной копией которая находится у тебя на компе (не знаю что это значит, но звучит так,
    как-будто если ты сделаешь коммит этого репозитория у себя на компе, - то эти изменения отобразятся и на удаленной копии
    этого репозитория)
    зайди в дирректорию с репозиторием: cd justamusta.github.io,
    добавь соединение к оригиналу: git remote add upstream https://github.com/justamusta/justamusta.github.io.git, дада, теперь
    название соединения/удаленной ветви другое - upstream, вообще его вроде можно было задать любым каким ты сама захочешь.
